/*
 * MainWindow.java
 *
 */


package cn.shu.myugs;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.text.DefaultCaret;
import javax.vecmath.Point3d;

import cn.shu.myugs.i18n.Localization;
import cn.shu.myugs.listeners.ControllerListener;
import cn.shu.myugs.types.GcodeCommand;
import cn.shu.myugs.uielements.ConnectionSettingsDialog;
import cn.shu.myugs.uielements.GcodeFileTypeFilter;
import cn.shu.myugs.uielements.GrblFirmwareSettingsDialog;
import cn.shu.myugs.uielements.StepSizeSpinnerModel;
import cn.shu.myugs.visualizer.VisualizerWindow;
import gnu.io.CommPortIdentifier;
import gnu.io.PortInUseException;
import javax.swing.SwingConstants;
import java.awt.Component;

/**
 *
 * @author Larry
 */
public class MainWindow extends javax.swing.JFrame 
implements KeyListener, ControllerListener {
    private static String VERSION = "1.0.7";

    /** Creates new form MainWindow */
    public MainWindow() {
    	getContentPane().setBackground(SystemColor.inactiveCaption);
    	setUIFont();
        initComponents();
        initProgram();
    }
    
    /**
     * 设置默认字体
     */
    public static void setUIFont()
    {
    	Font f = new Font("微软雅黑",Font.PLAIN,18);
    	String   names[]={ "Label", "CheckBox", "PopupMenu","MenuItem", "CheckBoxMenuItem",
    			"JRadioButtonMenuItem","ComboBox", "Button", "Tree", "ScrollPane",
    			"TabbedPane", "EditorPane", "TitledBorder", "Menu", "TextArea",
    			"OptionPane", "MenuBar", "ToolBar", "ToggleButton", "ToolTip",
    			"ProgressBar", "TableHeader", "Panel", "List", "ColorChooser",
    			"PasswordField","TextField", "Table", "Label", "Viewport",
    			"RadioButtonMenuItem","RadioButton", "DesktopPane", "InternalFrame"
    	}; 
    	for (String item : names) {
    		 UIManager.put(item+ ".font",f); 
    	}
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lineBreakGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        scrollWindowCheckBox = new javax.swing.JCheckBox();
        scrollWindowCheckBox.setBackground(SystemColor.inactiveCaption);
        bottomTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        consoleTextArea.setBackground(SystemColor.inactiveCaption);
        jScrollPane1 = new javax.swing.JScrollPane();
        
        commandTable = new cn.shu.myugs.uielements.GcodeTable();
        controlContextTabbedPane = new javax.swing.JTabbedPane();
        commandsPanel = new javax.swing.JPanel();
        commandsPanel.setBackground(SystemColor.inactiveCaption);
        commandLabel = new javax.swing.JLabel();
        commandTextField = new javax.swing.JTextField();
        fileModePanel = new javax.swing.JPanel();
        sendButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        visualizeButton = new javax.swing.JButton();
        browseButton = new javax.swing.JButton();
        fileTextField = new javax.swing.JTextField();
        fileLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        fileRunPanel = new javax.swing.JPanel();
        fileRunPanel.setBackground(SystemColor.inactiveCaption);
        remainingTimeValueLabel = new javax.swing.JLabel();
        sentRowsValueLabel = new javax.swing.JLabel();
        remainingRowsLabel = new javax.swing.JLabel();
        rowsValueLabel = new javax.swing.JLabel();
        remainingTimeLabel = new javax.swing.JLabel();
        durationValueLabel = new javax.swing.JLabel();
        durationLabel = new javax.swing.JLabel();
        remainingRowsValueLabel = new javax.swing.JLabel();
        sentRowsLabel = new javax.swing.JLabel();
        rowsLabel = new javax.swing.JLabel();
        machineControlPanel = new javax.swing.JPanel();
        machineControlPanel.setBackground(SystemColor.inactiveCaption);
        resetCoordinatesButton = new javax.swing.JButton();
        returnToZeroButton = new javax.swing.JButton();
        keyboardMovementPanel = new javax.swing.JPanel();
        keyboardMovementPanel.setBackground(SystemColor.inactiveCaption);
        stepSizeSpinner = new javax.swing.JSpinner();
        arrowMovementEnabled = new javax.swing.JCheckBox();
        arrowMovementEnabled.setBackground(SystemColor.inactiveCaption);
        movementButtonPanel = new javax.swing.JPanel();
        movementButtonPanel.setBackground(SystemColor.inactiveCaption);
        zMinusButton = new javax.swing.JButton();
        yMinusButton = new javax.swing.JButton();
        xPlusButton = new javax.swing.JButton();
        xMinusButton = new javax.swing.JButton();
        zPlusButton = new javax.swing.JButton();
        yPlusButton = new javax.swing.JButton();
        stepSizeLabel = new javax.swing.JLabel();
        performHomingCycleButton = new javax.swing.JButton();
        killAlarmLock = new javax.swing.JButton();
        toggleCheckMode = new javax.swing.JButton();
        helpButtonMachineControl = new javax.swing.JButton();
        softResetMachineControl = new javax.swing.JButton();
        requestStateInformation = new javax.swing.JButton();
        connectionPanel = new javax.swing.JPanel();
        connectionPanel.setBackground(SystemColor.inactiveCaption);
        commPortComboBox = new javax.swing.JComboBox();
        baudrateSelectionComboBox = new javax.swing.JComboBox();
        opencloseButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        baudLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        firmwareLabel = new javax.swing.JLabel();
        firmwareComboBox = new javax.swing.JComboBox();
        showVerboseOutputCheckBox = new javax.swing.JCheckBox();
        showVerboseOutputCheckBox.setBackground(SystemColor.inactiveCaption);
        statusPanel = new javax.swing.JPanel();
        statusPanel.setBackground(SystemColor.inactiveCaption);
        activeStateLabel = new javax.swing.JLabel();
        activeStateLabel.setBackground(SystemColor.inactiveCaption);
        activeStateValueLabel = new javax.swing.JLabel();
        activeStateValueLabel.setBackground(SystemColor.inactiveCaption);
        machinePosition = new javax.swing.JLabel();
        machinePositionXLabel = new javax.swing.JLabel();
        machinePositionYLabel = new javax.swing.JLabel();
        machinePositionZLabel = new javax.swing.JLabel();
        workPositionLabel = new javax.swing.JLabel();
        workPositionXLabel = new javax.swing.JLabel();
        workPositionYLabel = new javax.swing.JLabel();
        workPositionZLabel = new javax.swing.JLabel();
        machinePositionXValueLabel = new javax.swing.JLabel();
        machinePositionYValueLabel = new javax.swing.JLabel();
        machinePositionZValueLabel = new javax.swing.JLabel();
        workPositionXValueLabel = new javax.swing.JLabel();
        workPositionYValueLabel = new javax.swing.JLabel();
        workPositionZValueLabel = new javax.swing.JLabel();
        latestCommentValueLabel = new javax.swing.JLabel();
        latestCommentLabel = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        settingsMenu = new javax.swing.JMenu();
        grblConnectionSettingsMenuItem = new javax.swing.JMenuItem();
        firmwareSettingsMenu = new javax.swing.JMenu();
        grblFirmwareSettingsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new Dimension(1000, 700));

        scrollWindowCheckBox.setSelected(true);
        scrollWindowCheckBox.setText("Scroll output window");
        scrollWindowCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scrollWindowCheckBoxActionPerformed(evt);
            }
        });

        bottomTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        bottomTabbedPane.setMinimumSize(new java.awt.Dimension(0, 0));
        bottomTabbedPane.setPreferredSize(new java.awt.Dimension(468, 100));

        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        consoleTextArea.setMaximumSize(new java.awt.Dimension(32767, 32767));
        consoleTextArea.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane2.setViewportView(consoleTextArea);

        bottomTabbedPane.addTab("Console", jScrollPane2);

        commandTable.setModel(new cn.shu.myugs.uielements.GcodeTableModel());
        commandTable.setMaximumSize(new java.awt.Dimension(32767, 32767));
        commandTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(commandTable);
        //jScrollPane1.setVisible(false);
        bottomTabbedPane.addTab("Command Table", jScrollPane1);

        controlContextTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        controlContextTabbedPane.setMinimumSize(new java.awt.Dimension(395, 175));

        commandLabel.setText("Command");

        commandTextField.setEnabled(false);
        commandTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandTextFieldActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout commandsPanelLayout = new org.jdesktop.layout.GroupLayout(commandsPanel);
        commandsPanel.setLayout(commandsPanelLayout);
        commandsPanelLayout.setHorizontalGroup(
            commandsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(commandsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(commandsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(commandTextField)
                    .add(commandsPanelLayout.createSequentialGroup()
                        .add(commandLabel)
                        .add(0, 385, Short.MAX_VALUE)))
                .addContainerGap())
        );
        commandsPanelLayout.setVerticalGroup(
            commandsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(commandsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(commandLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(commandTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(169, Short.MAX_VALUE))
        );

        controlContextTabbedPane.addTab("Commands", commandsPanel);

        fileModePanel.setMinimumSize(new java.awt.Dimension(389, 150));

        sendButton.setText("Send");
        sendButton.setEnabled(false);
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause");
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        visualizeButton.setText("Visualize");
        visualizeButton.setEnabled(false);
        visualizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualizeButtonActionPerformed(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        fileTextField.setEnabled(false);

        fileLabel.setText("File");

        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.setMaximumSize(new java.awt.Dimension(88, 29));
        saveButton.setMinimumSize(new java.awt.Dimension(88, 29));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        remainingTimeValueLabel.setText("--:--:--");

        sentRowsValueLabel.setText("0");

        remainingRowsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        remainingRowsLabel.setText("Remaining Rows:");
        remainingRowsLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        remainingRowsLabel.setMaximumSize(null);
        remainingRowsLabel.setMinimumSize(new java.awt.Dimension(106, 14));
        remainingRowsLabel.setPreferredSize(new java.awt.Dimension(106, 14));

        rowsValueLabel.setText("0");

        remainingTimeLabel.setText("Estimated Time Remaining:");

        durationValueLabel.setText("00:00:00");

        durationLabel.setText("Duration:");

        remainingRowsValueLabel.setText("0");

        sentRowsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sentRowsLabel.setText("Sent Rows:");
        sentRowsLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sentRowsLabel.setMaximumSize(null);
        sentRowsLabel.setMinimumSize(new java.awt.Dimension(106, 14));
        sentRowsLabel.setPreferredSize(new java.awt.Dimension(106, 14));

        rowsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        rowsLabel.setText("Rows In File:");
        rowsLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        rowsLabel.setMinimumSize(new java.awt.Dimension(106, 14));
        rowsLabel.setPreferredSize(new java.awt.Dimension(106, 14));

        GroupLayout fileRunPanelLayout = new GroupLayout(fileRunPanel);
        fileRunPanelLayout.setHorizontalGroup(
        	fileRunPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(fileRunPanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(fileRunPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addComponent(sentRowsLabel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
        				.addComponent(remainingTimeLabel, Alignment.TRAILING)
        				.addComponent(durationLabel, Alignment.TRAILING)
        				.addComponent(remainingRowsLabel, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(rowsLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(fileRunPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addGroup(fileRunPanelLayout.createParallelGroup(Alignment.LEADING, false)
        					.addComponent(durationValueLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(remainingRowsValueLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(remainingTimeValueLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(rowsValueLabel, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE))
        				.addComponent(sentRowsValueLabel, GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
        			.addContainerGap())
        );
        fileRunPanelLayout.setVerticalGroup(
        	fileRunPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(fileRunPanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(fileRunPanelLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(rowsValueLabel, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
        				.addComponent(rowsLabel, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(fileRunPanelLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(sentRowsLabel, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
        				.addComponent(sentRowsValueLabel, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(fileRunPanelLayout.createParallelGroup(Alignment.TRAILING, false)
        				.addComponent(remainingRowsLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(remainingRowsValueLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(fileRunPanelLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(remainingTimeLabel)
        				.addComponent(remainingTimeValueLabel))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(fileRunPanelLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(durationValueLabel)
        				.addComponent(durationLabel))
        			.addContainerGap())
        );
        fileRunPanel.setLayout(fileRunPanelLayout);

        GroupLayout fileModePanelLayout = new GroupLayout(fileModePanel);
        fileModePanelLayout.setHorizontalGroup(
        	fileModePanelLayout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(fileModePanelLayout.createSequentialGroup()
        			.addGroup(fileModePanelLayout.createParallelGroup(Alignment.LEADING)
        				.addGroup(fileModePanelLayout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(sendButton, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(pauseButton, GroupLayout.PREFERRED_SIZE, 74, GroupLayout.PREFERRED_SIZE)
        					.addGap(11)
        					.addComponent(cancelButton)
        					.addPreferredGap(ComponentPlacement.RELATED, 200, Short.MAX_VALUE)
        					.addComponent(visualizeButton))
        				.addGroup(fileModePanelLayout.createSequentialGroup()
        					.addGap(8)
        					.addComponent(fileLabel)
        					.addGap(0, 495, Short.MAX_VALUE))
        				.addGroup(fileModePanelLayout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(fileRunPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(fileModePanelLayout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(fileModePanelLayout.createSequentialGroup()
        					.addComponent(browseButton)
        					.addGap(8))
        				.addGroup(fileModePanelLayout.createSequentialGroup()
        					.addComponent(saveButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addContainerGap())))
        		.addGroup(fileModePanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(fileTextField, GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
        			.addContainerGap())
        );
        fileModePanelLayout.setVerticalGroup(
        	fileModePanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(fileModePanelLayout.createSequentialGroup()
        			.addComponent(fileLabel)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(fileTextField, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(fileModePanelLayout.createParallelGroup(Alignment.LEADING)
        				.addComponent(browseButton, Alignment.TRAILING)
        				.addGroup(fileModePanelLayout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(cancelButton)
        					.addComponent(visualizeButton)
        					.addComponent(sendButton)
        					.addComponent(pauseButton)))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(fileModePanelLayout.createParallelGroup(Alignment.LEADING)
        				.addComponent(fileRunPanel, GroupLayout.PREFERRED_SIZE, 170, Short.MAX_VALUE)
        				.addComponent(saveButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap())
        );
        fileModePanel.setLayout(fileModePanelLayout);
        fileModePanel.setBackground(SystemColor.inactiveCaption);

        controlContextTabbedPane.addTab("File Mode", fileModePanel);

        resetCoordinatesButton.setText("Reset Zero");
        resetCoordinatesButton.setEnabled(false);
        resetCoordinatesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCoordinatesButtonActionPerformed(evt);
            }
        });

        returnToZeroButton.setText("Return to Zero");
        returnToZeroButton.setEnabled(false);
        returnToZeroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToZeroButtonActionPerformed(evt);
            }
        });

        stepSizeSpinner.setModel(new StepSizeSpinnerModel(1.0, 0.0, null, 1.0));
        stepSizeSpinner.setEnabled(false);
        stepSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                stepSizeSpinnerStateChanged(evt);
            }
        });

        arrowMovementEnabled.setText("Enable Keyboard Movement");
        arrowMovementEnabled.setEnabled(false);

        zMinusButton.setText("Z-");
        zMinusButton.setEnabled(false);
        zMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zMinusButtonActionPerformed(evt);
            }
        });

        yMinusButton.setText("Y-");
        yMinusButton.setEnabled(false);
        yMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yMinusButtonActionPerformed(evt);
            }
        });

        xPlusButton.setText("X+");
        xPlusButton.setEnabled(false);
        xPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xPlusButtonActionPerformed(evt);
            }
        });

        xMinusButton.setText("X-");
        xMinusButton.setEnabled(false);
        xMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xMinusButtonActionPerformed(evt);
            }
        });

        zPlusButton.setText("Z+");
        zPlusButton.setEnabled(false);
        zPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zPlusButtonActionPerformed(evt);
            }
        });

        yPlusButton.setText("Y+");
        yPlusButton.setEnabled(false);
        yPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yPlusButtonActionPerformed(evt);
            }
        });

        GroupLayout movementButtonPanelLayout = new GroupLayout(movementButtonPanel);
        movementButtonPanelLayout.setHorizontalGroup(
        	movementButtonPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(movementButtonPanelLayout.createSequentialGroup()
        			.addComponent(xMinusButton)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(movementButtonPanelLayout.createParallelGroup(Alignment.LEADING, false)
        				.addComponent(yMinusButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(yPlusButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(xPlusButton)
        			.addGap(14)
        			.addGroup(movementButtonPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addComponent(zMinusButton, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
        				.addComponent(zPlusButton, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)))
        );
        movementButtonPanelLayout.setVerticalGroup(
        	movementButtonPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(movementButtonPanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(movementButtonPanelLayout.createParallelGroup(Alignment.CENTER)
        				.addComponent(xMinusButton, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE)
        				.addComponent(xPlusButton, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE)
        				.addGroup(movementButtonPanelLayout.createSequentialGroup()
        					.addGroup(movementButtonPanelLayout.createParallelGroup(Alignment.LEADING)
        						.addComponent(zPlusButton, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE)
        						.addComponent(yPlusButton, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(movementButtonPanelLayout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(zMinusButton, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE)
        						.addComponent(yMinusButton, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE))))
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        movementButtonPanel.setLayout(movementButtonPanelLayout);

        stepSizeLabel.setText("Step size:");
        stepSizeLabel.setEnabled(false);

        GroupLayout keyboardMovementPanelLayout = new GroupLayout(keyboardMovementPanel);
        keyboardMovementPanelLayout.setHorizontalGroup(
        	keyboardMovementPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(keyboardMovementPanelLayout.createSequentialGroup()
        			.addGroup(keyboardMovementPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addComponent(arrowMovementEnabled)
        				.addGroup(keyboardMovementPanelLayout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(stepSizeLabel)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(stepSizeSpinner, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE))
        				.addComponent(movementButtonPanel, GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE))
        			.addContainerGap())
        );
        keyboardMovementPanelLayout.setVerticalGroup(
        	keyboardMovementPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(keyboardMovementPanelLayout.createSequentialGroup()
        			.addComponent(arrowMovementEnabled)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(keyboardMovementPanelLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(stepSizeLabel)
        				.addComponent(stepSizeSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(movementButtonPanel, GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
        );
        keyboardMovementPanelLayout.linkSize(SwingConstants.VERTICAL, new Component[] {stepSizeSpinner, stepSizeLabel});
        keyboardMovementPanel.setLayout(keyboardMovementPanelLayout);

        performHomingCycleButton.setText("$H");
        performHomingCycleButton.setEnabled(false);
        performHomingCycleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performHomingCycleButtonActionPerformed(evt);
            }
        });

        killAlarmLock.setText("$X");
        killAlarmLock.setEnabled(false);
        killAlarmLock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killAlarmLockActionPerformed(evt);
            }
        });

        toggleCheckMode.setText("$C");
        toggleCheckMode.setEnabled(false);
        toggleCheckMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleCheckModeActionPerformed(evt);
            }
        });

        helpButtonMachineControl.setText("Help");
        helpButtonMachineControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonMachineControlActionPerformed(evt);
            }
        });

        softResetMachineControl.setText("Soft Reset");
        softResetMachineControl.setEnabled(false);
        softResetMachineControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                softResetMachineControlActionPerformed(evt);
            }
        });

        requestStateInformation.setText("$G");
        requestStateInformation.setEnabled(false);
        requestStateInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestStateInformationActionPerformed(evt);
            }
        });

        GroupLayout machineControlPanelLayout = new GroupLayout(machineControlPanel);
        machineControlPanelLayout.setHorizontalGroup(
        	machineControlPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(machineControlPanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(machineControlPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addGroup(machineControlPanelLayout.createSequentialGroup()
        					.addGroup(machineControlPanelLayout.createParallelGroup(Alignment.LEADING)
        						.addComponent(resetCoordinatesButton, GroupLayout.PREFERRED_SIZE, 159, GroupLayout.PREFERRED_SIZE)
        						.addComponent(returnToZeroButton, GroupLayout.PREFERRED_SIZE, 159, GroupLayout.PREFERRED_SIZE)
        						.addComponent(softResetMachineControl, GroupLayout.PREFERRED_SIZE, 159, GroupLayout.PREFERRED_SIZE)
        						.addGroup(machineControlPanelLayout.createSequentialGroup()
        							.addComponent(performHomingCycleButton)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(killAlarmLock, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(toggleCheckMode)))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(requestStateInformation, GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
        					.addGap(108))
        				.addGroup(machineControlPanelLayout.createSequentialGroup()
        					.addComponent(helpButtonMachineControl)
        					.addPreferredGap(ComponentPlacement.RELATED, 182, Short.MAX_VALUE)))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(keyboardMovementPanel, GroupLayout.PREFERRED_SIZE, 266, GroupLayout.PREFERRED_SIZE)
        			.addGap(27))
        );
        machineControlPanelLayout.setVerticalGroup(
        	machineControlPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(machineControlPanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(machineControlPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addComponent(keyboardMovementPanel, GroupLayout.PREFERRED_SIZE, 209, GroupLayout.PREFERRED_SIZE)
        				.addGroup(machineControlPanelLayout.createSequentialGroup()
        					.addComponent(resetCoordinatesButton)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(returnToZeroButton)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(softResetMachineControl)
        					.addGap(18)
        					.addGroup(machineControlPanelLayout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(performHomingCycleButton)
        						.addComponent(toggleCheckMode)
        						.addComponent(requestStateInformation)
        						.addComponent(killAlarmLock))
        					.addGap(47)
        					.addComponent(helpButtonMachineControl)))
        			.addContainerGap(35, Short.MAX_VALUE))
        );
        machineControlPanel.setLayout(machineControlPanelLayout);

        controlContextTabbedPane.addTab("手动控制", machineControlPanel);

        connectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Connection"));
        connectionPanel.setMaximumSize(new java.awt.Dimension(247, 100));
        connectionPanel.setMinimumSize(new java.awt.Dimension(247, 100));
        connectionPanel.setName("Connection"); // NOI18N
        connectionPanel.setPreferredSize(new java.awt.Dimension(247, 100));

        commPortComboBox.setEditable(true);

        baudrateSelectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { /*"2400", "4800", */"9600", /*"19200", "38400", */"57600", "115200" }));
        baudrateSelectionComboBox.setSelectedIndex(2);
        baudrateSelectionComboBox.setToolTipText("Select baudrate to use for the serial port.");
        baudrateSelectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baudrateSelectionComboBoxActionPerformed(evt);
            }
        });

        opencloseButton.setText("Open");
        opencloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opencloseButtonActionPerformed(evt);
            }
        });

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/refresh.gif"))); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        baudLabel.setText("Baud:");

        firmwareLabel.setText("Firmware:");

        firmwareComboBox.setEditable(true);

        GroupLayout connectionPanelLayout = new GroupLayout(connectionPanel);
        connectionPanelLayout.setHorizontalGroup(
        	connectionPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(connectionPanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(connectionPanelLayout.createParallelGroup(Alignment.TRAILING, false)
        				.addGroup(connectionPanelLayout.createParallelGroup(Alignment.LEADING)
        					.addGroup(connectionPanelLayout.createSequentialGroup()
        						.addComponent(portLabel)
        						.addPreferredGap(ComponentPlacement.RELATED)
        						.addComponent(commPortComboBox, GroupLayout.PREFERRED_SIZE, 183, GroupLayout.PREFERRED_SIZE))
        					.addGroup(connectionPanelLayout.createSequentialGroup()
        						.addComponent(baudLabel)
        						.addGap(3)
        						.addComponent(baudrateSelectionComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addGap(7)
        						.addComponent(refreshButton, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
        						.addPreferredGap(ComponentPlacement.RELATED)
        						.addComponent(opencloseButton)))
        				.addGroup(connectionPanelLayout.createSequentialGroup()
        					.addComponent(firmwareLabel)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(firmwareComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        			.addContainerGap())
        );
        connectionPanelLayout.setVerticalGroup(
        	connectionPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(connectionPanelLayout.createSequentialGroup()
        			.addGroup(connectionPanelLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(portLabel)
        				.addComponent(commPortComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(connectionPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addComponent(opencloseButton)
        				.addGroup(connectionPanelLayout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(baudLabel)
        					.addComponent(baudrateSelectionComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        				.addComponent(refreshButton, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(connectionPanelLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(firmwareLabel)
        				.addComponent(firmwareComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        connectionPanel.setLayout(connectionPanelLayout);

        showVerboseOutputCheckBox.setText("Show verbose output");

        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Machine status"));
        statusPanel.setMinimumSize(new java.awt.Dimension(247, 160));
        statusPanel.setPreferredSize(new java.awt.Dimension(247, 160));

        activeStateLabel.setText("活动状态：");
        activeStateLabel.setOpaque(true);

        activeStateValueLabel.setText(" ");
        activeStateValueLabel.setOpaque(true);

        machinePosition.setText("Machine Position:");

        machinePositionXLabel.setText("X:");

        machinePositionYLabel.setText("Y:");

        machinePositionZLabel.setText("Z:");

        workPositionLabel.setText("Work Position:");

        workPositionXLabel.setText("X:");

        workPositionYLabel.setText("Y:");

        workPositionZLabel.setText("Z:");

        machinePositionXValueLabel.setText("0");

        machinePositionYValueLabel.setText("0");

        machinePositionZValueLabel.setText("0");

        workPositionXValueLabel.setText("0");

        workPositionYValueLabel.setText("0");

        workPositionZValueLabel.setText("0");

        latestCommentValueLabel.setText(" ");

        latestCommentLabel.setText("Latest Comment:");
        //latestCommentLabel.setVisible(false);

        org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(statusPanelLayout.createSequentialGroup()
                        .add(latestCommentLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(latestCommentValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(statusPanelLayout.createSequentialGroup()
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(statusPanelLayout.createSequentialGroup()
                                .add(activeStateLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(activeStateValueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(statusPanelLayout.createSequentialGroup()
                                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(workPositionLabel)
                                    .add(statusPanelLayout.createSequentialGroup()
                                        .add(17, 17, 17)
                                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(statusPanelLayout.createSequentialGroup()
                                                .add(workPositionZLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(workPositionZValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .add(statusPanelLayout.createSequentialGroup()
                                                .add(workPositionYLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(workPositionYValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .add(statusPanelLayout.createSequentialGroup()
                                                .add(workPositionXLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(workPositionXValueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(machinePosition)
                                    .add(statusPanelLayout.createSequentialGroup()
                                        .add(17, 17, 17)
                                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(statusPanelLayout.createSequentialGroup()
                                                .add(machinePositionZLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(machinePositionZValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .add(statusPanelLayout.createSequentialGroup()
                                                .add(machinePositionYLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(machinePositionYValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .add(statusPanelLayout.createSequentialGroup()
                                                .add(machinePositionXLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(machinePositionXValueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(activeStateLabel)
                    .add(activeStateValueLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(latestCommentLabel)
                    .add(latestCommentValueLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(statusPanelLayout.createSequentialGroup()
                        .add(workPositionLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(workPositionXLabel)
                            .add(workPositionXValueLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(workPositionYLabel)
                            .add(workPositionYValueLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(workPositionZLabel)
                            .add(workPositionZValueLabel)))
                    .add(statusPanelLayout.createSequentialGroup()
                        .add(machinePosition)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(machinePositionXLabel)
                            .add(machinePositionXValueLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(machinePositionYLabel)
                            .add(machinePositionYValueLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(machinePositionZLabel)
                            .add(machinePositionZValueLabel))))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        settingsMenu.setText("设置");

        grblConnectionSettingsMenuItem.setText("Sender Settings");
        grblConnectionSettingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grblConnectionSettingsMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(grblConnectionSettingsMenuItem);

        firmwareSettingsMenu.setText("Firmware Settings");

        grblFirmwareSettingsMenuItem.setText("GRBL");
        grblFirmwareSettingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grblFirmwareSettingsMenuItemActionPerformed(evt);
            }
        });
        firmwareSettingsMenu.add(grblFirmwareSettingsMenuItem);

        settingsMenu.add(firmwareSettingsMenu);

        mainMenuBar.add(settingsMenu);

        setJMenuBar(mainMenuBar);

        GroupLayout layout = new GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(connectionPanel, GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
        				.addComponent(statusPanel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(scrollWindowCheckBox)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(showVerboseOutputCheckBox)
        					.addGap(76))
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(controlContextTabbedPane, GroupLayout.PREFERRED_SIZE, 670, GroupLayout.PREFERRED_SIZE)
        					.addGap(29))))
        		.addComponent(bottomTabbedPane, GroupLayout.DEFAULT_SIZE, 1041, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(connectionPanel, GroupLayout.PREFERRED_SIZE, 144, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(statusPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(controlContextTabbedPane, GroupLayout.PREFERRED_SIZE, 318, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(scrollWindowCheckBox)
        						.addComponent(showVerboseOutputCheckBox))))
        			.addGap(11)
        			.addComponent(bottomTabbedPane, GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /** End of generated code.
     */
    
    /** Generated callback functions, hand coded.
     */
    private void scrollWindowCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scrollWindowCheckBoxActionPerformed
        checkScrollWindow();
    }//GEN-LAST:event_scrollWindowCheckBoxActionPerformed

    private void commandTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandTextFieldActionPerformed
        final String str = this.commandTextField.getText().replaceAll("(\\r\\n|\\n\\r|\\r|\\n)", "");
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    controller.queueStringForComm(str);
                } catch (Exception ex) {
                    displayErrorDialog(ex.getMessage());
                }
            }
        });
        this.commandTextField.setText("");
        this.manualCommandHistory.add(str);
        this.commandNum = -1;
    }//GEN-LAST:event_commandTextFieldActionPerformed

    // TODO: Find out how to make these key* functions actions like the above.
    // TODO: Create custom text area that will do all this stuff without
    //       cluttering up the MainWindow class.
    @Override
    public void keyPressed(KeyEvent ke) {
        boolean pressed = false;
        
        if (ke.getKeyCode() == KeyEvent.VK_UP) {
            pressed = true;
            if (this.commandNum == 0 || this.manualCommandHistory.isEmpty()) {
                java.awt.Toolkit.getDefaultToolkit().beep();
            } else if (this.commandNum == -1) {
                this.commandNum = this.manualCommandHistory.size() -1;
            } else {
                this.commandNum--;
            }
        }
        else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {
            pressed = true;
            if ((this.commandNum == -1) || this.commandNum == (this.manualCommandHistory.size() -1)) {
                java.awt.Toolkit.getDefaultToolkit().beep();
                return;
            } else {
                this.commandNum++;
            }
        }
        
        if (pressed && this.commandNum != -1) {
            String text = this.manualCommandHistory.get(this.commandNum);
            this.commandTextField.setText(text);
        }
    }
    
    @Override
    public void keyTyped(KeyEvent ke) {
        // Don't care about this one...
    }
    
    @Override
    public void keyReleased(KeyEvent ke) {
        // Or this one...
    }
    
    private void opencloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opencloseButtonActionPerformed
        if( this.opencloseButton.getText().equalsIgnoreCase(/*"open"*/Localization.getString("open")) ) {
            // Hook the view up to the model
            String firmware = this.firmwareComboBox.getSelectedItem().toString();
            this.controller = FirmwareUtils.getControllerFor(firmware);

            MainWindow.applySettingsToController(this.controller);
            
            // Register comm listeners
            this.controller.addListener(this);
            if (vw != null) {
                this.controller.addListener(vw);
                vw.setMinArcLength(this.controller.getSmallArcThreshold());
                vw.setArcLength(this.controller.getSmallArcSegmentLength());
            }
            
            Boolean ret = openCommConnection();

            if (ret) {
                this.updateControlsForState(ControlState.COMM_IDLE);
                if (this.gcodeFile != null) {
                    try {
                        loadFile(this.gcodeFile);
                    } catch (FileNotFoundException ex) {
                        MainWindow.displayErrorDialog(Localization.getString(
                                "mainWindow.error.openingFile") +": " + ex.getMessage());
                    } catch (IOException e) {
                        MainWindow.displayErrorDialog(Localization.getString(
                                "mainWindow.error.processingFile") +": " + e.getMessage());
                    }
                }
                // Let the command field grab focus.
                commandTextField.grabFocus();
            }
        } else {
            this.closeCommConnection();
            this.updateControlsForState(ControlState.COMM_DISCONNECTED);
        }
    }//GEN-LAST:event_opencloseButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        loadPortSelector();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void baudrateSelectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baudrateSelectionComboBoxActionPerformed
    }//GEN-LAST:event_baudrateSelectionComboBoxActionPerformed

    private void xPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xPlusButtonActionPerformed
        this.adjustManualLocation(1, 0, 0);
    }//GEN-LAST:event_xPlusButtonActionPerformed

    private void xMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xMinusButtonActionPerformed
        this.adjustManualLocation(-1, 0, 0);
    }//GEN-LAST:event_xMinusButtonActionPerformed

    private void yPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yPlusButtonActionPerformed
        this.adjustManualLocation(0, 1, 0);
    }//GEN-LAST:event_yPlusButtonActionPerformed

    private void yMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yMinusButtonActionPerformed
        this.adjustManualLocation(0, -1, 0);
    }//GEN-LAST:event_yMinusButtonActionPerformed

    private void zPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zPlusButtonActionPerformed
        this.adjustManualLocation(0, 0, 1);
    }//GEN-LAST:event_zPlusButtonActionPerformed

    private void zMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zMinusButtonActionPerformed
        this.adjustManualLocation(0, 0, -1);
    }//GEN-LAST:event_zMinusButtonActionPerformed

    private void stepSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_stepSizeSpinnerStateChanged
    }//GEN-LAST:event_stepSizeSpinnerStateChanged

    private void resetCoordinatesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCoordinatesButtonActionPerformed
        try {
            this.controller.resetCoordinatesToZero();
        } catch (Exception ex) {
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }//GEN-LAST:event_resetCoordinatesButtonActionPerformed

    private void performHomingCycleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performHomingCycleButtonActionPerformed
        try {
            this.controller.performHomingCycle();
        } catch (Exception ex) {
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }//GEN-LAST:event_performHomingCycleButtonActionPerformed

    private void returnToZeroButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnToZeroButtonActionPerformed
        try {
            this.controller.returnToHome();
            // The return to home command uses G91 to lift the tool.
            this.G91Mode = true;
        } catch (Exception ex) {
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }//GEN-LAST:event_returnToZeroButtonActionPerformed

    private void helpButtonMachineControlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonMachineControlActionPerformed
        StringBuilder message = new StringBuilder()
                .append(Localization.getString("mainWindow.resetZero")).append("\n")
                .append(Localization.getString("mainWindow.returnToZero")).append("\n")
                .append(Localization.getString("mainWindow.softReset")).append("\n")
                .append(Localization.getString("mainWindow.homing")).append("\n")
                .append(Localization.getString("mainWindow.alarmLock")).append("\n")
                .append(Localization.getString("mainWindow.checkMode")).append("\n")
                .append(Localization.getString("mainWindow.getState"));
        
        JOptionPane.showMessageDialog(new JFrame(), 
                message, 
                Localization.getString("mainWindow.helpDialog"),
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_helpButtonMachineControlActionPerformed

    private void killAlarmLockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killAlarmLockActionPerformed
        try {
            this.controller.killAlarmLock();
        } catch (Exception ex) {
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }//GEN-LAST:event_killAlarmLockActionPerformed

    private void toggleCheckModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleCheckModeActionPerformed
        try {
            this.controller.toggleCheckMode();
        } catch (Exception ex) {
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }//GEN-LAST:event_toggleCheckModeActionPerformed

    private void requestStateInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestStateInformationActionPerformed
        try {
            this.controller.viewParserState();
        } catch (Exception ex) {
            ex.printStackTrace();
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }//GEN-LAST:event_requestStateInformationActionPerformed

    private void softResetMachineControlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_softResetMachineControlActionPerformed
        try {
            this.controller.issueSoftReset();
        } catch (Exception ex) {
            ex.printStackTrace();
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }//GEN-LAST:event_softResetMachineControlActionPerformed

    // TODO: It would be nice to streamline this somehow...
    private void grblConnectionSettingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grblConnectionSettingsMenuItemActionPerformed
        ConnectionSettingsDialog gcsd = new ConnectionSettingsDialog(this, true);
        
        // Set initial values.
        gcsd.setSpeedOverrideEnabled(SettingsFactory.isOverrideSpeedSelected());
        gcsd.setSpeedOverridePercent((int) SettingsFactory.getOverrideSpeedValue());
        gcsd.setMaxCommandLength(SettingsFactory.getMaxCommandLength());
        gcsd.setTruncateDecimalLength(SettingsFactory.getTruncateDecimalLength());
        gcsd.setSingleStepModeEnabled(SettingsFactory.getSingleStepMode());
        gcsd.setRemoveAllWhitespace(SettingsFactory.getRemoveAllWhitespace());
        gcsd.setStatusUpdatesEnabled(SettingsFactory.getStatusUpdatesEnabled());
        gcsd.setStatusUpdatesRate(SettingsFactory.getStatusUpdateRate());
        gcsd.setStateColorDisplayEnabled(SettingsFactory.getDisplayStateColor());
        gcsd.setConvertArcsToLines(SettingsFactory.getConvertArcsToLines());
        gcsd.setSmallArcThreshold(SettingsFactory.getSmallArcThreshold());
        gcsd.setSmallArcSegmentLengthSpinner(SettingsFactory.getSmallArcSegmentLength());
        gcsd.setVisible(true);
        
        if (gcsd.saveChanges()) {
            SettingsFactory.setOverrideSpeedSelected(gcsd.getSpeedOverrideEnabled());
            SettingsFactory.setOverrideSpeedValue(gcsd.getSpeedOverridePercent());
            SettingsFactory.setMaxCommandLength(gcsd.getMaxCommandLength());
            SettingsFactory.setTruncateDecimalLength(gcsd.getTruncateDecimalLength());
            SettingsFactory.setSingleStepMode(gcsd.getSingleStepModeEnabled());
            SettingsFactory.setRemoveAllWhitespace(gcsd.getRemoveAllWhitespace());
            SettingsFactory.setStatusUpdatesEnabled(gcsd.getStatusUpdatesEnabled());
            SettingsFactory.setStatusUpdateRate(gcsd.getStatusUpdatesRate());
            SettingsFactory.setDisplayStateColor(gcsd.getDisplayStateColor());
            SettingsFactory.setConvertArcsToLines(gcsd.getConvertArcsToLines());
            SettingsFactory.setSmallArcThreshold(gcsd.getSmallArcThreshold());
            SettingsFactory.setSmallArcSegmentLength(gcsd.getSmallArcSegmentLength());
            
            if (this.controller != null) {
                MainWindow.applySettingsToController(this.controller);
            }

            if (this.vw != null) {
                vw.setMinArcLength(gcsd.getSmallArcThreshold());
                vw.setArcLength(gcsd.getSmallArcSegmentLength());
            }
        }
    }//GEN-LAST:event_grblConnectionSettingsMenuItemActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                fileTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
                gcodeFile = fileChooser.getSelectedFile();
                loadFile(gcodeFile);
                        
                if (this.vw != null) {
                    vw.setGcodeFile(gcodeFile.getAbsolutePath());
                }
            } catch (FileNotFoundException ex) {
                MainWindow.displayErrorDialog(Localization.getString(
                        "mainWindow.error.openingFile") +": " + ex.getMessage());
            } catch (IOException e) {
                MainWindow.displayErrorDialog(Localization.getString(
                        "mainWindow.error.processingFile") +": " + e.getMessage());

            }
        } else {
            // Canceled file open.
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void visualizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualizeButtonActionPerformed
        // Create new object if it is null.
        if (this.vw == null) {
            this.vw = new VisualizerWindow();
            vw.setMinArcLength(SettingsFactory.getSmallArcThreshold());
            vw.setArcLength(SettingsFactory.getSmallArcSegmentLength());
            if (this.fileTextField.getText().length() > 1) {
                vw.setGcodeFile(this.fileTextField.getText());
            }
            // Add listener
            if (this.controller != null) {
                this.controller.addListener(vw);
            }
        }

        // Display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                vw.setVisible(true);
            }
        });
    }//GEN-LAST:event_visualizeButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.controller.cancelSend();

        this.updateControlsForState(ControlState.COMM_IDLE);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        // Note: Cannot cancel a send while paused because there are commands
        //       in the GRBL buffer which can't be un-sent.
        try {
            String pause = Localization.getString("mainWindow.ui.pauseButton");
            String resume = Localization.getString("mainWindow.ui.resumeButton");
            
            if (this.pauseButton.getText().equalsIgnoreCase(pause)) {
                this.controller.pauseStreaming();
                this.pauseButton.setText(resume);
                this.cancelButton.setEnabled(false);
            }
            else if (this.pauseButton.getText().equalsIgnoreCase(resume)) {
                this.controller.resumeStreaming();
                this.pauseButton.setText(pause);
                this.cancelButton.setEnabled(true);
            }
        } catch (Exception e) {
            e.printStackTrace();
            MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.pauseResume"));
        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed

        ActionListener actionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        int sent = controller.rowsSent();

                        // Early exit condition.
                        if (sent == 0) { return; }

                        long elapsedTime = controller.getSendDuration();
                        durationValueLabel.setText(Utils.formattedMillis(elapsedTime));
                        long estimate = jobEstimate;
                        if (estimate <= 0) {
                            long timePerRow = elapsedTime / sent;
                            estimate = timePerRow * controller.rowsInSend();
                        }
                        remainingTimeValueLabel.setText(Utils.formattedMillis(estimate - elapsedTime));
                    }
                });

            }
        };

        this.resetTimerLabels();

        if (timer != null){ timer.stop(); }
        timer = new Timer(1000, actionListener);

        // Note: there is a divide by zero error in the timer because it uses
        //       the rowsValueLabel that was just reset.

        try {
            // This will throw an exception and prevent that other stuff from
            // happening (clearing the table before its ready for clearing.
            this.controller.isReadyToStreamFile();

            this.updateControlsForState(ControlState.COMM_SENDING);

            // Mark the position in the table where the commands will begin.
            //commandTable.setOffset();

            if (G91Mode) {
                this.controller.preprocessAndAppendGcodeCommand("G90");
            }

            this.controller.appendGcodeCommands(processedCommandLines, this.gcodeFile);

            this.resetSentRowLabels(this.controller.rowsInQueue());
            timer.start();
            this.controller.beginStreaming();
        } catch (Exception e) {
            timer.stop();
            this.updateControlsForState(ControlState.COMM_IDLE);
            e.printStackTrace();
            MainWindow.displayErrorDialog(
                    Localization.getString("mainWindow.error.startingStream") + ": "+e.getMessage());
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void grblFirmwareSettingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grblFirmwareSettingsMenuItemActionPerformed
        try {
            if (this.controller == null) {
                MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.noFirmware"));
            } else if (this.controller instanceof GrblController) {
                    GrblFirmwareSettingsDialog gfsd = new GrblFirmwareSettingsDialog(this, true, (GrblController)this.controller);
                    gfsd.setVisible(true);
            } else {
                MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.notGrbl"));
            }
        } catch (Exception ex) {
                MainWindow.displayErrorDialog(ex.getMessage());
        }
    }//GEN-LAST:event_grblFirmwareSettingsMenuItemActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        int returnVal = fileChooser.showSaveDialog(this);
                //fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File newFile = fileChooser.getSelectedFile();
                AbstractController control = FirmwareUtils.getControllerFor(FirmwareUtils.GRBL);
                MainWindow.applySettingsToController(control);
                control.appendGcodeCommands(this.processedCommandLines, this.gcodeFile);
                control.saveToFile(newFile);
            } catch (FileNotFoundException ex) {
                MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.openingFile")
                        + ": " + ex.getMessage());
            } catch (IOException e) {
                MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.processingFile")
                        + ": "+e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.duringSave") +
                        ": " + e.getMessage());
            }
        }    
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    //javax.swing.UIManager.setLookAndFeel(info.getClassName());
                	//UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());//跨平台的Java风格
                	UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());//当前系统风格
                	break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Load the stored settings or generate defaults */
        SettingsFactory.loadSettings();

        /* Create the form */
        final MainWindow mw = new MainWindow();
        
        /* Apply the settings to the MainWindow bofore showing it */
        mw.arrowMovementEnabled.setSelected(SettingsFactory.getManualControllesEnabled());
        mw.stepSizeSpinner.setValue(SettingsFactory.getStepSize());
        mw.fileChooser = new JFileChooser(SettingsFactory.getLastPath());
        mw.commPortComboBox.setSelectedItem(SettingsFactory.getPort());
        mw.baudrateSelectionComboBox.setSelectedItem(SettingsFactory.getPortRate());
        mw.scrollWindowCheckBox.setSelected(SettingsFactory.isScrollWindow());
        mw.showVerboseOutputCheckBox.setSelected(SettingsFactory.isVerboseOutput());
        mw.firmwareComboBox.setSelectedItem(SettingsFactory.getFirmware());
        
        /* Display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                mw.setVisible(true);
            }
        });
        
        mw.initFileChooser();
        
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                if (mw.fileChooser.getSelectedFile() != null ) {
                    SettingsFactory.setLastPath(mw.fileChooser.getSelectedFile().getAbsolutePath());
                }
                
                SettingsFactory.setStepSize(mw.getStepSize());
                SettingsFactory.setManualControllesEnabled(mw.arrowMovementEnabled.isSelected());
                SettingsFactory.setPort(mw.commPortComboBox.getSelectedItem().toString());
                SettingsFactory.setPortRate(mw.baudrateSelectionComboBox.getSelectedItem().toString());
                SettingsFactory.setScrollWindow(mw.scrollWindowCheckBox.isSelected());
                SettingsFactory.setVerboseOutput(mw.showVerboseOutputCheckBox.isSelected());
                SettingsFactory.setFirmware(mw.firmwareComboBox.getSelectedItem().toString());
                SettingsFactory.saveSettings();
            }
        });
    }
    
    /**
     * FileChooser has to be initialized after JFrame is opened, otherwise the settings will not be applied.
     */
    private void initFileChooser() {
        //Setup the file filter for gcode files.
        GcodeFileTypeFilter filter = new GcodeFileTypeFilter();
        
        // Setup file browser with the last path used.
        this.fileChooser = new JFileChooser(SettingsFactory.getLastPath()); 
        this.fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        this.fileChooser.setFileHidingEnabled(true);
        this.fileChooser.addChoosableFileFilter(filter);
        this.fileChooser.setAcceptAllFileFilterUsed(true);
        this.fileChooser.setFileFilter(filter);
    }
        
    private void initProgram() {
        this.setLocalLabels();
        this.loadPortSelector();
        this.checkScrollWindow();
        this.loadFirmwareSelector();
        this.setTitle("机械手上位机");
        
        // Command History
        this.manualCommandHistory = new ArrayList<String>();
        this.commandTextField.addKeyListener(this);
        
        // Add keyboard listener for manual controls.
        KeyboardFocusManager.getCurrentKeyboardFocusManager()
            .addKeyEventDispatcher(new KeyEventDispatcher() {
                @Override
                public boolean dispatchKeyEvent(KeyEvent e) {
                    // Check context.
                    if (((arrowMovementEnabled.isSelected()) &&
                            e.getID() == KeyEvent.KEY_PRESSED) &&
                            xPlusButton.isEnabled()) {
                        switch (e.getKeyCode()) {
                            case KeyEvent.VK_RIGHT:
                                xPlusButtonActionPerformed(null);
                                e.consume();
                                return true;
                            case KeyEvent.VK_LEFT:
                                xMinusButtonActionPerformed(null);
                                e.consume();
                                return true;
                            case KeyEvent.VK_UP:
                                yPlusButtonActionPerformed(null);
                                e.consume();
                                return true;
                            case KeyEvent.VK_DOWN:
                                yMinusButtonActionPerformed(null);
                                e.consume();
                                return true;
                            case KeyEvent.VK_PAGE_UP:
                                zPlusButtonActionPerformed(null);
                                e.consume();
                                return true;
                            case KeyEvent.VK_PAGE_DOWN:
                                zMinusButtonActionPerformed(null);
                                e.consume();
                                return true;
                        }
                    }
                    
                    return false;
                }
            });
    }

    private double getStepSize() {
        return Double.parseDouble( this.stepSizeSpinner.getValue().toString() );
    }
    
    /**
     * Sends a G91 command in some combination of x, y, and z directions with a
     * step size of stepDirection.
     * 
     * Direction is specified by the direction param being positive or negative.
     */
    private void adjustManualLocation(int dirX, int dirY, int dirZ) {
        
        // Don't send empty commands.
        if ((dirX == 0) && (dirY == 0) && (dirZ == 0)) {
            return;
        }

        // Format step size from spinner.
        String stepSize = formatter.format(this.getStepSize());

        // Build G91 command.
        StringBuilder command = new StringBuilder("G91 G0 ");
        
        if (dirX != 0) {
            command.append(" X");
            if (dirX < 0) {
                command.append('-');
            }
            command.append(stepSize);
        } if (dirY != 0) {
            command.append(" Y");
            if (dirY < 0) {
                command.append('-');
            }
            command.append(stepSize);
        } if (dirZ != 0) {
            command.append(" Z");
            if (dirZ < 0) {
                command.append('-');
            }
            command.append(stepSize);
        }

        try {
            this.controller.queueStringForComm(command.toString());
            G91Mode = true;
        } catch (Exception ex) {
            MainWindow.displayErrorDialog(ex.getMessage());
        }
    }
    
    private void setStatusColorForState(String state) {
        if (SettingsFactory.getDisplayStateColor()) {
            java.awt.Color color = null; // default to a transparent background.
            if (state.equals(Localization.getString("mainWindow.status.alarm"))) {
                color = Color.RED;
            } else if (state.equals(Localization.getString("mainWindow.status.hold"))) {
                color = Color.YELLOW;
            } else if (state.equals(Localization.getString("mainWindow.status.queue"))) {
                color = Color.YELLOW;
            } else if (state.equals(Localization.getString("mainWindow.status.run"))) {
                color = Color.GREEN;
            }

            this.activeStateLabel.setBackground(color);
            this.activeStateValueLabel.setBackground(color);
        } else {
            this.activeStateLabel.setBackground(null);
            this.activeStateValueLabel.setBackground(null);
        }
    }
    
    private void updateControlsForState(ControlState state) {
        
        switch (state) {
            case FILE_SELECTED:
                this.saveButton.setEnabled(true);
                this.visualizeButton.setEnabled(true);
                this.updateFileControls(this.controller != null && this.controller.isCommOpen());
                break;
            case COMM_DISCONNECTED:
                this.updateConnectionControls(false);
                this.updateManualControls(false);
                this.updateWorkflowControls(false);
                this.updateFileControls(false);
                this.updateControlsStopSending();
                this.setStatusColorForState("");
                break;
            case COMM_IDLE:
                this.updateConnectionControls(true);
                this.updateManualControls(true);
                this.updateWorkflowControls(true);
                this.updateControlsStopSending();
                break;
            case COMM_SENDING:
                // Command tab
                this.commandTextField.setEnabled(false);

                // File tab
                this.sendButton.setEnabled(false);
                this.pauseButton.setEnabled(true);
                this.cancelButton.setEnabled(true);
                this.pauseButton.setText(Localization.getString("mainWindow.ui.pauseButton"));

                // Workflow tab
                this.updateWorkflowControls(false);

                // Jogging commands
                this.updateManualControls(false);
        
                break;
            case COMM_SENDING_PAUSED:
                this.pauseButton.setText(Localization.getString("mainWindow.ui.resumeButton"));
                break;
            default:
                
        }
    }
    
    /**
     * Enable/disable connection frame based on connection state.
     */
    private void updateConnectionControls(boolean isOpen) {

        this.commPortComboBox.setEnabled(!isOpen);
        this.baudrateSelectionComboBox.setEnabled(!isOpen);
        this.refreshButton.setEnabled(!isOpen);
        this.commandTextField.setEnabled(isOpen);

        if (isOpen) {
            this.opencloseButton.setText(Localization.getString("close"));
        } else {
            this.opencloseButton.setText(Localization.getString("open"));
        }
    }
    
    /**
     * Enable/disable file frame based on connection state.
     */
    private void updateFileControls(boolean enabled) {
        this.sendButton.setEnabled(enabled && this.gcodeFile != null);
        //browse always enabled.
        //this.browseButton.setEnabled(enabled);
        this.fileTextField.setEnabled(enabled);

        if (!enabled) {
            updateControlsStopSending();
        }
    }
    
    private void updateControlsStopSending() {
        if (this.timer != null && this.timer.isRunning()) {
            // Stop the timer
            this.timer.stop();
        }
        
        // In case transitioning from file sending or file send paused.
        this.pauseButton.setText(Localization.getString("mainWindow.ui.pauseButton"));
        this.pauseButton.setEnabled(false);
        this.cancelButton.setEnabled(false);
    }
    
    /**
     * Enable/disable jogging controls.
     */
    private void updateManualControls(boolean enabled) {
        this.arrowMovementEnabled.setEnabled(enabled);

        this.xMinusButton.setEnabled(enabled);
        this.xPlusButton.setEnabled(enabled);
        this.yMinusButton.setEnabled(enabled);
        this.yPlusButton.setEnabled(enabled);
        this.zMinusButton.setEnabled(enabled);
        this.zPlusButton.setEnabled(enabled);
        this.stepSizeLabel.setEnabled(enabled);
        this.stepSizeSpinner.setEnabled(enabled);
    }
    
    private void updateWorkflowControls(boolean enabled) {
        this.resetCoordinatesButton.setEnabled(enabled);
        this.returnToZeroButton.setEnabled(enabled);
        this.performHomingCycleButton.setEnabled(enabled);
        this.softResetMachineControl.setEnabled(enabled);
        this.killAlarmLock.setEnabled(enabled);
        this.toggleCheckMode.setEnabled(enabled);
        this.requestStateInformation.setEnabled(enabled);
    }

    private void resetTimerLabels() {
        // Reset labels
        this.durationValueLabel.setText("00:00:00");
        if (this.jobEstimate < 0) {
            this.remainingTimeValueLabel.setText("estimating...");
        } else if (this.jobEstimate == 0) {
            this.remainingTimeValueLabel.setText("--:--:--");
        } else {
            this.remainingTimeValueLabel.setText(Utils.formattedMillis(this.jobEstimate));
        }
    }

    private void resetSentRowLabels(Integer numRows) {
        // Reset labels
        String totalRows =  numRows.toString();
        resetTimerLabels();
        this.sentRowsValueLabel.setText("0");
        this.remainingRowsValueLabel.setText(totalRows);
        this.rowsValueLabel.setText(totalRows);
    }
    
    /**
     * Updates all text labels in the GUI with localized labels.
     */
    private void setLocalLabels() {
        this.arrowMovementEnabled.setText(Localization.getString("mainWindow.swing.arrowMovementEnabled"));
        this.baudLabel.setText(Localization.getString("mainWindow.swing.baudLabel"));
        this.browseButton.setText(Localization.getString("mainWindow.swing.browseButton"));
        this.cancelButton.setText(Localization.getString("mainWindow.swing.cancelButton"));
        this.commandLabel.setText(Localization.getString("mainWindow.swing.commandLabel"));
        this.connectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
                Localization.getString("mainWindow.swing.connectionPanel")));
        this.controlContextTabbedPane.setTitleAt(0, Localization.getString("mainWindow.swing.controlContextTabbedPane.commands"));
        this.controlContextTabbedPane.setTitleAt(1, Localization.getString("mainWindow.swing.controlContextTabbedPane.fileMode"));
        this.controlContextTabbedPane.setTitleAt(2, Localization.getString("mainWindow.swing.controlContextTabbedPane.machineControl"));
        this.durationLabel.setText(Localization.getString("mainWindow.swing.durationLabel"));
        this.fileLabel.setText(Localization.getString("mainWindow.swing.fileLabel"));
        this.firmwareLabel.setText(Localization.getString("mainWindow.swing.firmwareLabel"));
        this.firmwareSettingsMenu.setText(Localization.getString("mainWindow.swing.firmwareSettingsMenu"));
        this.grblConnectionSettingsMenuItem.setText(Localization.getString("mainWindow.swing.grblConnectionSettingsMenuItem"));
        this.grblFirmwareSettingsMenuItem.setText(Localization.getString("mainWindow.swing.grblFirmwareSettingsMenuItem"));
        this.helpButtonMachineControl.setText(Localization.getString("help"));
        this.settingsMenu.setText(Localization.getString("mainWindow.swing.settingsMenu"));
        this.statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
                Localization.getString("mainWindow.swing.statusPanel")));
        this.bottomTabbedPane.setTitleAt(0, Localization.getString("mainWindow.swing.bottomTabbedPane.console"));
        this.bottomTabbedPane.setTitleAt(1, Localization.getString("mainWindow.swing.bottomTabbedPane.table"));
        this.latestCommentLabel.setText(Localization.getString("mainWindow.swing.latestCommentLabel"));
        this.machinePosition.setText(Localization.getString("mainWindow.swing.machinePosition"));
        this.opencloseButton.setText(Localization.getString("mainWindow.swing.opencloseButton"));
        this.pauseButton.setText(Localization.getString("mainWindow.swing.pauseButton"));
        this.portLabel.setText(Localization.getString("mainWindow.swing.portLabel"));
        this.remainingRowsLabel.setText(Localization.getString("mainWindow.swing.remainingRowsLabel"));
        this.remainingTimeLabel.setText(Localization.getString("mainWindow.swing.remainingTimeLabel"));
        this.resetCoordinatesButton.setText(Localization.getString("mainWindow.swing.resetCoordinatesButton"));
        this.returnToZeroButton.setText(Localization.getString("mainWindow.swing.returnToZeroButton"));
        this.rowsLabel.setText(Localization.getString("mainWindow.swing.rowsLabel"));
        this.saveButton.setText(Localization.getString("save"));
        this.scrollWindowCheckBox.setText(Localization.getString("mainWindow.swing.scrollWindowCheckBox"));
        this.sendButton.setText(Localization.getString("mainWindow.swing.sendButton"));
        this.sentRowsLabel.setText(Localization.getString("mainWindow.swing.sentRowsLabel"));
        this.showVerboseOutputCheckBox.setText(Localization.getString("mainWindow.swing.showVerboseOutputCheckBox"));
        this.softResetMachineControl.setText(Localization.getString("mainWindow.swing.softResetMachineControl"));
        this.stepSizeLabel.setText(Localization.getString("mainWindow.swing.stepSizeLabel"));
        this.visualizeButton.setText(Localization.getString("mainWindow.swing.visualizeButton"));
        this.workPositionLabel.setText(Localization.getString("mainWindow.swing.workPositionLabel"));
    }
    
    // Scans for comm ports and puts them in the comm port combo box.
    private void loadPortSelector() {
        commPortComboBox.removeAllItems();
        
        List<CommPortIdentifier> portList = CommUtils.getSerialPortList();

        if (portList.size() < 1) {
            MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.noSerialPort"));
        } else {
            // Sort?
            //java.util.Collections.sort(portList);

            java.util.Iterator<CommPortIdentifier> portIter = portList.iterator();

            while ( portIter.hasNext() ) {
                CommPortIdentifier portIdentifier = portIter.next();
                commPortComboBox.addItem(portIdentifier.getName());
            }

            commPortComboBox.setSelectedIndex(0);
        }
    }
    
    private void loadFirmwareSelector() {
        firmwareComboBox.removeAllItems();
        List<String> firmwareList = FirmwareUtils.getFirmwareList();
        
        if (firmwareList.size() < 1) {
            MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.noFirmware"));
        } else {
            java.util.Iterator<String> iter = firmwareList.iterator();
            while ( iter.hasNext() ) {
                firmwareComboBox.addItem(iter.next());
            }
        }
    }
    
    private void loadFile(java.io.File file) throws FileNotFoundException, IOException {
        this.jobEstimate = 0L;
        this.gcodeFile = file;
        FileReader fr = new FileReader(file);
        Charset cs = Charset.forName(fr.getEncoding());
        fr.close();
        List<String> lines = Files.readAllLines(file.toPath(), cs);
        if (this.controller != null && this.controller.isCommOpen())  {
            this.processedCommandLines = this.controller.preprocess(lines);
            this.jobEstimate = -1L;
            this.resetSentRowLabels(this.processedCommandLines.size());
            Thread estimateThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    jobEstimate = controller.getJobLengthEstimate(processedCommandLines);
                    resetSentRowLabels(processedCommandLines.size());
                    updateControlsForState(ControlState.FILE_SELECTED);
                }
            });
            estimateThread.start();

        } else {
            this.resetSentRowLabels(lines.size());
            updateControlsForState(ControlState.FILE_SELECTED);
        }

        if (this.vw != null) {
            vw.setGcodeFile(file.getAbsolutePath());
        }
    }

    private static void applySettingsToController(AbstractController controller) {
        // Apply SettingsFactory settings to controller.
        if (SettingsFactory.isOverrideSpeedSelected()) {
            double value = SettingsFactory.getOverrideSpeedValue();
            controller.setSpeedOverride(value);
        } else {
            controller.setSpeedOverride(-1);
        }

        try {
            controller.setMaxCommandLength(SettingsFactory.getMaxCommandLength());
            controller.setTruncateDecimalLength(SettingsFactory.getTruncateDecimalLength());
            controller.setSingleStepMode(SettingsFactory.getSingleStepMode());
            controller.setStatusUpdatesEnabled(SettingsFactory.getStatusUpdatesEnabled());
            controller.setStatusUpdateRate(SettingsFactory.getStatusUpdateRate());
            controller.setRemoveAllWhitespace(SettingsFactory.getRemoveAllWhitespace());
            controller.setConvertArcsToLines(SettingsFactory.getConvertArcsToLines());
            controller.setSmallArcThreshold(SettingsFactory.getSmallArcThreshold());
            controller.setSmallArcSegmentLength(SettingsFactory.getSmallArcSegmentLength());
        } catch (Exception ex) {

            StringBuilder message = new StringBuilder()
                    .append(Localization.getString("mainWindow.error.firmwareSetting"))
                    .append(": \n    ")
                    .append(Localization.getString("firmware.feature.maxCommandLength")).append("\n    ")
                    .append(Localization.getString("firmware.feature.truncateDecimal")).append("\n    ")
                    .append(Localization.getString("firmware.feature.singleStep")).append("\n    ")
                    .append(Localization.getString("firmware.feature.removeWhitespace")).append("\n    ")
                    .append(Localization.getString("firmware.feature.linesToArc")).append("\n    ")
                    .append(Localization.getString("firmware.feature.statusUpdates")).append("\n    ")
                    .append(Localization.getString("firmware.feature.statusUpdateRate"));
            
            MainWindow.displayErrorDialog(message
                    + "\n\n" + ex.getMessage());
        }
    }
    
    private void checkScrollWindow() {
        // Console output.
        DefaultCaret caret = (DefaultCaret)consoleTextArea.getCaret();
        if (scrollWindowCheckBox.isSelected()) {
          caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
          consoleTextArea.setCaretPosition(consoleTextArea.getDocument().getLength());
        } else {
            caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        }
        
        // Command table.
        this.commandTable.setAutoWindowScroll(scrollWindowCheckBox.isSelected());
    }
    
    private String getNewline() {
        return "\r\n";
        
        /*
        if (lineBreakNR.isSelected())
            return "\n\r";
        else if (lineBreakRN.isSelected())
            return "\r\n";
        else if (lineBreakN.isSelected())
            return "\n";
        else
            return "wtfbbq";
        */
    }

    private boolean openCommConnection() {
        boolean connected = false;
        try {
            this.clearTable();
            this.sentRowsValueLabel.setText("0");
            this.sentRows = 0;

            String port = commPortComboBox.getSelectedItem().toString();
            int portRate = Integer.parseInt(baudrateSelectionComboBox.getSelectedItem().toString());
             
            connected = controller.openCommPort(port, portRate);

        } catch (PortInUseException e) {
            
            
            //Localization.getString("")
            StringBuilder message = new StringBuilder()
                    .append(Localization.getString("mainWindow.error.rxtx"))
                    .append("(")
                    .append(e.getClass().getName())
                    .append("): ")
                    .append(e.getMessage()).append("\n\n")
            
                    .append(Localization.getString("mainWindow.error.rxtxMac1"))
                    .append(String.format(Localization.getString("mainWindow.error.rxtxMac2"), "\"/var/lock\""))
                    .append("\n     sudo mkdir /var/lock")
                    .append("\n     sudo chmod 777 /var/lock");
            MainWindow.displayErrorDialog(message.toString());
        }catch (Exception e) {
            e.printStackTrace();
            MainWindow.displayErrorDialog(Localization.getString("mainWindow.error.connection")
                    + " ("+ e.getClass().getName() + "): "+e.getMessage());
        }
        return connected;
    }
    
    private void closeCommConnection() {
        this.controller.closeCommPort();
        this.controller = null;
    }
    
    void clearTable() {
        this.commandTable.clear();
    }
        
    private static void displayErrorDialog(String errorMessage) {
        JOptionPane.showMessageDialog(new JFrame(), errorMessage, 
                Localization.getString("error"), JOptionPane.ERROR_MESSAGE);
    }
    
    /** SerialCommunicatorListener implementation.
     */
    
    @Override
    public void fileStreamComplete(String filename, boolean success) {
        // Stop the timer
        this.timer.stop();
        remainingTimeValueLabel.setText(Utils.formattedMillis(0));
        remainingRowsValueLabel.setText("" + controller.rowsInQueue());

        this.updateControlsForState(ControlState.COMM_IDLE);

        if (success) {
            JOptionPane.showMessageDialog(new JFrame(),
                    Localization.getString("mainWindow.ui.jobComplete") + " " + this.durationValueLabel.getText(),
                    Localization.getString("success"), JOptionPane.INFORMATION_MESSAGE);
        } else {
            displayErrorDialog(Localization.getString("mainWindow.error.jobComplete"));
        }
    }
    
    @Override
    public void commandQueued(GcodeCommand command) {
        this.commandTable.addRow(command);
    }
     
    @Override
    public void commandSent(final GcodeCommand command) {
        if (this.controller.isStreamingFile()) {
            // Update # rows sent label
            this.sentRows++;
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //sentRowsValueLabel.setText(""+sentRows);
                sentRowsValueLabel.setText(""+controller.rowsSent());
                
                // sent
                commandTable.updateRow(command);
            }});
    }
    
    @Override
    public void commandComment(String comment) {
        latestCommentValueLabel.setText(comment);
    }
    
    @Override
    public void commandComplete(final GcodeCommand command) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                commandTable.updateRow(command);

                if (controller.isStreamingFile()) {
                    // decrement remaining rows
                    int remaining = Integer.parseInt(remainingRowsValueLabel.getText());
                    if (remaining > 0) {
                        remaining--;
                        remainingRowsValueLabel.setText("" + remaining);
                    }
                    if (vw != null) {
                        vw.setCompletedCommandNumber(controller.rowsSent());
                    }
                }
            }});
    }

    // TODO: Change verbose into an enum to toggle regular/verbose/error.
    @Override
    public void messageForConsole(final String msg, final Boolean verbose) {
        final javax.swing.JTextArea consoleTextArea = this.consoleTextArea;
        final javax.swing.JCheckBox showVerboseOutputCheckBox = this.showVerboseOutputCheckBox;
        final javax.swing.JCheckBox scrollWindowCheckBox = this.scrollWindowCheckBox;

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (!verbose || showVerboseOutputCheckBox.isSelected()) {
                    String verboseS = "[" + Localization.getString("verbose") + "]";
                    consoleTextArea.append((verbose ? verboseS : "") + msg);

                    if (consoleTextArea.isVisible() &&
                            scrollWindowCheckBox.isEnabled()) {
                        consoleTextArea.setCaretPosition(consoleTextArea.getDocument().getLength());
                    }
                }
            }
        });
    }
    
    @Override
    public void statusStringListener(String state, Point3d machineCoord, Point3d workCoord) {
        this.activeStateValueLabel.setText( state );
        this.setStatusColorForState( state );
        
        if (machineCoord != null) {
            this.machinePositionXValueLabel.setText( formatter.format(machineCoord.x) + "" );
            this.machinePositionYValueLabel.setText( formatter.format(machineCoord.y) + "" );
            this.machinePositionZValueLabel.setText( formatter.format(machineCoord.z) + "" );
        }
        
        if (workCoord != null) {
            this.workPositionXValueLabel.setText( formatter.format(workCoord.x) + "" );
            this.workPositionYValueLabel.setText( formatter.format(workCoord.y) + "" );
            this.workPositionZValueLabel.setText( formatter.format(workCoord.z) + "" );
        }
    }
    
    @Override
    public void postProcessData(int numRows) {
    }
    
    // My Variables
    private javax.swing.JFileChooser fileChooser;
    private java.io.File gcodeFile;
    private List<String> processedCommandLines;

    // TODO: Move command history box into a self contained object.
    // This is for the command history box.
    private int commandNum = -1;
    private List<String> manualCommandHistory;
    
    private AbstractController controller;
    
    private int sentRows = 0;
    private long jobEstimate = 0L;
    private boolean G91Mode = false;

    // Other windows
    VisualizerWindow vw = null;
    
    // Duration timer
    private Timer timer;
    
    private enum ControlState {
        COMM_DISCONNECTED,
        COMM_IDLE,
        COMM_SENDING,
        COMM_SENDING_PAUSED,
        FILE_SELECTED,
    };
        
    // Static utilities
    private final static DecimalFormatSymbols dfs = DecimalFormatSymbols.getInstance();
    static {dfs.setDecimalSeparator('.');}
    private static NumberFormat formatter = new DecimalFormat("#.###", dfs);

    // Generated variables.
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activeStateLabel;
    private javax.swing.JLabel activeStateValueLabel;
    private javax.swing.JCheckBox arrowMovementEnabled;
    private javax.swing.JLabel baudLabel;
    private javax.swing.JComboBox baudrateSelectionComboBox;
    private javax.swing.JTabbedPane bottomTabbedPane;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox commPortComboBox;
    private javax.swing.JLabel commandLabel;
    private cn.shu.myugs.uielements.GcodeTable commandTable;
    private javax.swing.JTextField commandTextField;
    private javax.swing.JPanel commandsPanel;
    private javax.swing.JPanel connectionPanel;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JTabbedPane controlContextTabbedPane;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JLabel durationValueLabel;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JPanel fileModePanel;
    private javax.swing.JPanel fileRunPanel;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JComboBox firmwareComboBox;
    private javax.swing.JLabel firmwareLabel;
    private javax.swing.JMenu firmwareSettingsMenu;
    private javax.swing.JMenuItem grblConnectionSettingsMenuItem;
    private javax.swing.JMenuItem grblFirmwareSettingsMenuItem;
    private javax.swing.JButton helpButtonMachineControl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel keyboardMovementPanel;
    private javax.swing.JButton killAlarmLock;
    private javax.swing.JLabel latestCommentLabel;
    private javax.swing.JLabel latestCommentValueLabel;
    private javax.swing.ButtonGroup lineBreakGroup;
    private javax.swing.JPanel machineControlPanel;
    private javax.swing.JLabel machinePosition;
    private javax.swing.JLabel machinePositionXLabel;
    private javax.swing.JLabel machinePositionXValueLabel;
    private javax.swing.JLabel machinePositionYLabel;
    private javax.swing.JLabel machinePositionYValueLabel;
    private javax.swing.JLabel machinePositionZLabel;
    private javax.swing.JLabel machinePositionZValueLabel;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JPanel movementButtonPanel;
    private javax.swing.JButton opencloseButton;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton performHomingCycleButton;
    private javax.swing.JLabel portLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel remainingRowsLabel;
    private javax.swing.JLabel remainingRowsValueLabel;
    private javax.swing.JLabel remainingTimeLabel;
    private javax.swing.JLabel remainingTimeValueLabel;
    private javax.swing.JButton requestStateInformation;
    private javax.swing.JButton resetCoordinatesButton;
    private javax.swing.JButton returnToZeroButton;
    private javax.swing.JLabel rowsLabel;
    private javax.swing.JLabel rowsValueLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox scrollWindowCheckBox;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel sentRowsLabel;
    private javax.swing.JLabel sentRowsValueLabel;
    private javax.swing.JMenu settingsMenu;
    private javax.swing.JCheckBox showVerboseOutputCheckBox;
    private javax.swing.JButton softResetMachineControl;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JLabel stepSizeLabel;
    private javax.swing.JSpinner stepSizeSpinner;
    private javax.swing.JButton toggleCheckMode;
    private javax.swing.JButton visualizeButton;
    private javax.swing.JLabel workPositionLabel;
    private javax.swing.JLabel workPositionXLabel;
    private javax.swing.JLabel workPositionXValueLabel;
    private javax.swing.JLabel workPositionYLabel;
    private javax.swing.JLabel workPositionYValueLabel;
    private javax.swing.JLabel workPositionZLabel;
    private javax.swing.JLabel workPositionZValueLabel;
    private javax.swing.JButton xMinusButton;
    private javax.swing.JButton xPlusButton;
    private javax.swing.JButton yMinusButton;
    private javax.swing.JButton yPlusButton;
    private javax.swing.JButton zMinusButton;
    private javax.swing.JButton zPlusButton;
    // End of variables declaration//GEN-END:variables
}
